#!/usr/bin/env python

# WARNING: This script is not intended for direct use. It contains call backs to
# be called after completion (successful or not) of transfers to/from HPSS.

import logging

import peewee as pw

from argh import arg, dispatch_commands

from ch_util import data_index as di

# Configure logging
logging.basicConfig(level=logging.INFO)
log_fmt = logging.Formatter("%(asctime)s %(levelname)s >> %(message)s",
                            "%b %d %H:%M:%S")
log = logging.getLogger("")
log.setLevel(logging.INFO)

try:
    from cloghandler import ConcurrentRotatingFileHandler as RFHandler
except ImportError:
    # Next 2 lines are optional:  issue a warning to the user
    from warnings import warn
    warn("ConcurrentLogHandler package not installed.  Using builtin log handler")
    from logging.handlers import RotatingFileHandler as RFHandler

log_file = RFHandler("/project/k/krs/alpenhorn/alpenhorn_hpss.log", "a", maxBytes=(2**25), backupCount=25)
log.addHandler(log_file)
log_file.setFormatter(log_fmt)

di.connect_database(read_write=True)


@arg('file_id', type=int)
@arg('node_id', type=int)
def push_failed(file_id, node_id):
    """Update the database to reflect that the HPSS transfer failed.

    INTERNAL COMMAND. NOT FOR HUMAN USE!
    """
    afile = di.ArchiveFile.select().where(di.ArchiveFile.id == file_id).get()
    node = di.StorageNode.select().where(di.StorageNode.id == node_id).get()

    log.warn('Failed push: %s/%s into node %s' % (afile.acq.name, afile.name, node.name))

    # We don't really need to do anything other than log this (we could reattempt)


@arg('file_id', type=int)
@arg('node_id', type=int)
def pull_failed(file_id, node_id):
    """Update the database to reflect that the HPSS transfer failed.

    INTERNAL COMMAND. NOT FOR HUMAN USE!
    """
    afile = di.ArchiveFile.select().where(di.ArchiveFile.id == file_id).get()
    node = di.StorageNode.select().where(di.StorageNode.id == node_id).get()

    log.warn('Failed pull: %s/%s onto node %s' % (afile.acq.name, afile.name, node.name))


    # We don't really need to do anything other than log this (we could reattempt)


@arg('file_id', type=int)
@arg('node_id', type=int)
def push_success(file_id, node_id):
    """Update the database to reflect that the HPSS transfer succeeded.

    INTERNAL COMMAND. NOT FOR HUMAN USE!
    """

    afile = di.ArchiveFile.select().where(di.ArchiveFile.id == file_id).get()
    node = di.StorageNode.select().where(di.StorageNode.id == node_id).get()

    # Update the FileCopy (if exists), or insert a new FileCopy
    try:

        fcopy = di.ArchiveFileCopy.select().where(
            di.ArchiveFileCopy.file == afile,
            di.ArchiveFileCopy.node == node).get()

        fcopy.has_file = 'Y'
        fcopy.wants_file = 'Y'
        fcopy.save()

    except pw.DoesNotExist:
        di.ArchiveFileCopy.insert(file=afile, node=node, has_file='Y',
                                  wants_file='Y').execute()

    log.info('Successful push: %s/%s onto node %s' % (afile.acq.name, afile.name, node.name))


@arg('file_id', type=int)
@arg('node_id', type=int)
def pull_success(file_id, node_id):
    """Update the database to reflect that the HPSS transfer succeeded.

    INTERNAL COMMAND. NOT FOR HUMAN USE!
    """

    afile = di.ArchiveFile.select().where(di.ArchiveFile.id == file_id).get()
    node = di.StorageNode.select().where(di.StorageNode.id == node_id).get()

    # Update the FileCopy (if exists), or insert a new FileCopy
    try:

        fcopy = di.ArchiveFileCopy.select().where(
            di.ArchiveFileCopy.file == afile,
            di.ArchiveFileCopy.node == node).get()

        fcopy.has_file = 'Y'
        fcopy.wants_file = 'Y'
        fcopy.save()

    except pw.DoesNotExist:
        di.ArchiveFileCopy.insert(file=afile, node=node, has_file='Y',
                                  wants_file='Y').execute()

    log.info('Successful pull: %s/%s into node %s' % (afile.acq.name, afile.name, node.name))


if __name__ == '__main__':
    dispatch_commands([push_failed, pull_failed, push_success, pull_success])
