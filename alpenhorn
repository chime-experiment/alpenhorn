#!/usr/bin/env python
# Alpenhorn: announce datafile information to the database

import sys
import datetime

from argh import arg, aliases, dispatch_commands
import peewee as pw

from ch_util import data_index as di


def ask_yesno(question):
    answer = raw_input("%s [Y/N] " % question)
    if answer == "y" or answer == "Y":
        return True
    else:
        return False


@arg('node_name', help='node to copy from')
@arg('group_name', help='group to copy to')
@arg('--force', '-f', help='proceed without confirmation')
@arg('--nice', '-n', help='nice level for transfer')
def node2group(node_name, group_name, force=False, nice=0):
    """sync files from a node to another group"""
    try:
        from_node = di.StorageNode.get(name=node_name)
    except pw.DoesNotExist:
        raise Exception("Node \"%s\" does not exist in the DB." % node_name)
    try:
        to_group = di.StorageGroup.get(name=group_name)
    except pw.DoesNotExist:
        raise Exception("Group \"%s\" does not exist in the DB." % group_name)

    copy = di.ArchiveFileCopy.select().where(
        di.ArchiveFileCopy.node == from_node,
        di.ArchiveFileCopy.has_file == 'Y',
        ~(di.ArchiveFileCopy.file <<
          di.ArchiveFile.select().join(di.ArchiveFileCopy).where(
              di.ArchiveFileCopy.node <<
              di.StorageNode.select().where(
                  di.StorageNode.group == to_group))))

    if not copy.count():
        print "No files to copy from node %s." % (node_name)
        return

    print "Will request that %d files be copied from node %s to group %s." % \
          (copy.count(), node_name, group_name)
    if not (force or ask_yesno("Do you want to proceed?")):
        print "Aborted."
        return

    sys.stdout.write("Updating DB ")
    for c in copy:
        try:
            req = di.ArchiveFileCopyRequest.get(file=c.file, group_to=to_group,
                                                node_from=from_node)
            di.ArchiveFileCopyRequest.update(nice=nice, completed=False,
                                             n_requests=req.n_requests + 1,
                                             timestamp=datetime.datetime.now()).where(
                di.ArchiveFileCopyRequest.file == c.file,
                di.ArchiveFileCopyRequest.group_to == to_group,
                di.ArchiveFileCopyRequest.node_from == from_node).execute()
        except pw.DoesNotExist:

            di.ArchiveFileCopyRequest.create(file=c.file, group_to=to_group,
                                             node_from=from_node, nice=nice,
                                             completed=False, n_requests=1,
                                             timestamp=datetime.datetime.now())
        sys.stdout.write(".")
        sys.stdout.flush()
    sys.stdout.write("\n")


@aliases('status')
def summary(width=80):
    """give a short summary of the archive status"""
    col1 = 15
    col2 = 6
    col3 = width - col1 - col2 - 10

    print
    print "Summary of Data Index at %s." % datetime.datetime.now()
    hline = "+-%-*s-+-%*s-+-%-*s-+" % (col1, "-" * col1, col2, "-" * col2,
                                       col3, "-" * col3)
    print hline
    print "| %-*s | %*s | %-*s |" % (col1, "Node", col2, "N File", col3,
                                     "Mount Point")
    print hline
    for node in di.StorageNode.select():
        n_file = di.ArchiveFileCopy.select().where(
            di.ArchiveFileCopy.node == node).count()
        if node.mounted:
            mount_point = "%s:%s" % (node.host, node.root)
        else:
            mount_point = "<unmounted>"
        print "| %-*s | %*d | %-*s |" % (col1, node.name, col2, n_file, col3,
                                         mount_point)
    print hline
    print


@arg('node_name', help='name of node to verify (must be local)')
@arg('--md5', help='perform full check against md5sum')
def verify(node_name, md5=False):
    """verify the archive against the database.
    """

    import os

    try:
        this_node = di.StorageNode.get(di.StorageNode.name == node_name)
    except pw.DoesNotExist:
        print "Specified node does not exist."
        return

    ## Use a complicated query with a tuples construct to fetch everything we need
    ## in a single query. This massively speeds up the whole process versus
    ## fetching all the FileCopy's then querying for Files and Acqs.
    lfiles = di.ArchiveFile.select(di.ArchiveFile.name, di.ArchiveAcq.name, di.ArchiveFile.size_b, di.ArchiveFile.md5sum).join(di.ArchiveAcq).switch(di.ArchiveFile).join(di.ArchiveFileCopy).where(di.ArchiveFileCopy.node == this_node, di.ArchiveFileCopy.has_file == 'Y').tuples()
    nfiles = lfiles.count()

    missing_files = []
    corrupt_files = []

    # Try to use progress bar if available
    try:
        from progress.bar import Bar
        lfiles = Bar('Checking files', max=nfiles).iter(lfiles)
    except ImportError:
        pass

    for filename, acqname, filesize, md5sum in lfiles:

        filepath = this_node.root + '/' + acqname + '/' + filename

        # Check if file is plain missing
        if not os.path.exists(filepath):
            missing_files.append(filepath)
            continue

        if md5:
            file_md5 = di.md5sum_file(filepath)
            corrupt = (file_md5 != md5sum)
        else:
            corrupt = (os.path.getsize(filepath) != filesize)

        if corrupt:
            corrupt_files.append(filepath)
            continue

    if len(missing_files) > 0:
        print
        print "=== Missing files ==="
        for fname in missing_files:
            print fname

    if len(corrupt_files) > 0:
        print
        print "=== Corrupt files ==="
        for fname in corrupt_files:
            print fname

    print
    print "=== Summary ==="
    print "  %i total files" % nfiles
    print "  %i missing files" % len(missing_files)
    print "  %i corrupt files" % len(corrupt_files)



if __name__ == "__main__":
    dispatch_commands([node2group, summary, verify])
